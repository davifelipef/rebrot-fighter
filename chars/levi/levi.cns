; KFM's constants and state file.
; There are comments scattered through this file, so you may like to
; take a look if would like to learn more about the cns.

[Data]
;Amount of life to start with
life = 1000
;attack power (more is stronger)
attack = 100
;defensive power (more is stronger)
defence = 100
;Percentage to increase defense everytime player is knocked down
fall.defence_up = 50
;Time which player lies down for, before getting up
liedown.time = 60
;Number of points for juggling
airjuggle = 15
;Default hit spark number for HitDefs
sparkno = 2
;Default guard spark number
guard.sparkno = 40
;1 to enable echo on KO
KO.echo = 0
;Volume offset (negative for softer)
;volume = 0
;Variables with this index and above will not have their values
;reset to 0 between rounds or matches. There are 60 int variables,
;indexed from 0 to 59, and 40 float variables, indexed from 0 to 39.
;If omitted, then it defaults to 60 and 40 for integer and float
;variables repectively, meaning that none are persistent, i.e. all
;are reset. If you want your variables to persist between matches,
;you need to override state 5900 from common1.cns.
IntPersistIndex = 60
FloatPersistIndex = 40

[Size]
xscale = 1.7           ;Horizontal scaling factor.
yscale = 1.7           ;Vertical scaling factor.
ground.back = 20     ;Player width (back, ground)
ground.front = 30    ;Player width (front, ground)
air.back = 12        ;Player width (back, air)
air.front = 12       ;Player width (front, air)
height = 60          ;Height of player (for opponent to jump over)
attack.dist = 160    ;Default attack distance
proj.attack.dist = 90 ;Default attack distance for projectiles
proj.doscale = 0     ;Set to 1 to scale projectiles too
head.pos = -5, -90   ;Approximate position of head
mid.pos = -5, -60    ;Approximate position of midsection
shadowoffset = 0     ;Number of pixels to vertically offset the shadow
draw.offset = 0,0    ;Player drawing offset in pixels (x, y). Recommended 0,0

[Velocity]
walk.fwd  = 2.4      ;Walk forward
walk.back = -2.2     ;Walk backward
run.fwd  = 4.6, 0    ;Run forward (x, y)
run.back = -4.5,-3.8 ;Hop backward (x, y)
jump.neu = 0,-8.4    ;Neutral jumping velocity (x, y)
jump.back = -2.55    ;Jump back Speed (x, y)
jump.fwd = 2.5       ;Jump forward Speed (x, y)
runjump.back = -2.55,-8.1 ;Running jump speeds (opt)
runjump.fwd = 4,-8.1      ;.
airjump.neu = 0,-8.1      ;.
airjump.back = -2.55      ;Air jump speeds (opt)
airjump.fwd = 2.5         ;.
air.gethit.groundrecover = -.15,-3.5  ;Velocity for ground recovery state (x, y) **MUGEN 1.0**
air.gethit.airrecover.mul = .5,.2     ;Multiplier for air recovery velocity (x, y) **MUGEN 1.0**
air.gethit.airrecover.add = 0,-4.5    ;Velocity offset for air recovery (x, y) **MUGEN 1.0**
air.gethit.airrecover.back = -1       ;Extra x-velocity for holding back during air recovery **MUGEN 1.0**
air.gethit.airrecover.fwd = 0         ;Extra x-velocity for holding forward during air recovery **MUGEN 1.0**
air.gethit.airrecover.up = -2         ;Extra y-velocity for holding up during air recovery **MUGEN 1.0**
air.gethit.airrecover.down = 1.5      ;Extra y-velocity for holding down during air recovery **MUGEN 1.0**

[Movement]
airjump.num = 0       ;Number of air jumps allowed (opt)
airjump.height = 35   ;Minimum distance from ground before you can air jump (opt)
yaccel = .44          ;Vertical acceleration
stand.friction = .85  ;Friction coefficient when standing
crouch.friction = .82 ;Friction coefficient when crouching
stand.friction.threshold = 2          ;If player's speed drops below this threshold while standing, stop his movement **MUGEN 1.0**
crouch.friction.threshold = .05       ;If player's speed drops below this threshold while crouching, stop his movement **MUGEN 1.0**
air.gethit.groundlevel = 25           ;Y-position at which a falling player is considered to hit the ground **MUGEN 1.0**
air.gethit.groundrecover.ground.threshold = -20 ;Y-position below which falling player can use the recovery command **MUGEN 1.0**
air.gethit.groundrecover.groundlevel = 10   ;Y-position at which player in the ground recovery state touches the ground **MUGEN 1.0**
air.gethit.airrecover.threshold = -1  ;Y-velocity above which player may use the air recovery command **MUGEN 1.0**
air.gethit.airrecover.yaccel = .35    ;Vertical acceleration for player in the air recovery state **MUGEN 1.0**
air.gethit.trip.groundlevel = 15      ;Y-position at which player in the tripped state touches the ground **MUGEN 1.0**
down.bounce.offset = 0, 20            ;Offset for player bouncing off the ground (x, y) **MUGEN 1.0**
down.bounce.yaccel = .4               ;Vertical acceleration for player bouncing off the ground **MUGEN 1.0**
down.bounce.groundlevel = 12          ;Y-position at which player bouncing off the ground touches the ground again **MUGEN 1.0**
down.friction.threshold = .05         ;If the player's speed drops below this threshold while lying down, stop his movement **MUGEN 1.0**

;Default language victory quotes (optional).  **MUGEN 1.0**
;If this section is included, the default language victory quotes must be in English.
[Quotes]
; Up to 100 victory quotes can be specified per language (victory0 - victory99)
victory1 = "Eu realmente não me importo se ganho ou perco."
victory2 = "Você me obrigou a isso."
victory3 = "Foi divertido."
victory4 = "Acho que eu não precisava ter tirado os óculos."

;Alternate language victory quotes (optional).
;0 or more alternate language sections may be added, preceded by the
;ISO 639-1 code followed by a ".", e.g. "[ja.Quotes]".
;See language setting in mugen.cfg.
[ja.Quotes]
victory1 = "カンフー突き手を破らぬ限り、お前に勝ち目はない！"
victory2 = "十年早いんだぞ"
victory3 = "お前は見覚えがあるな。テレビにでも…？"
victory4 = "お前の動きは見破りやすすぎる。　なに、カンフー突き手が覚えたいんだと？　素人には無理だぞ"
victory5 = "ふー。　いい汗だった"
victory6 = "もっと強い相手に挑戦したい"
victory7 = "なんだと！彼女はここにもいないと？"

;---------------------------------------------------------------------------
; Variable usage:
; This is a record of the variables that KFM uses. Keeping a record of your
; variable usage helps you avoid careless mistakes later.
; var(1)  - Used in kfm.cmd for combo condition (updated every tick)
; var(2)  - Used in Kung Fu Throw (state 800) to remember if fwd was being
;           held (remembered from state 800 through state 810).

;---------------------------------------------------------------------------

; Lose by Time Over
; CNS difficulty: basic
[Statedef 170]
type = S
ctrl = 0
anim = 170
velset = 0,0

[State 170, 1]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

;---------------------------------------------------------------------------
; Win state decider
; CNS difficulty: basic
[Statedef 180]
type = S

[State 180, 1]
type = ChangeState
trigger1 = Time = 0
value = 181

;---------------------------------------------------------------------------
; Win pose 1 
; CNS difficulty: basic
[Statedef 181]
type = S
ctrl = 0
anim = 181
velset = 0,0

[State 181, 1]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

; Balloon setup for the intro 1
[State 181, Balloon]
type = VarSet
trigger1 = RoundState != 0
var(59) = 1 ; Set var(59) to 1 during intro

[State 181, BalloonIntro] ; State to display the balloon for right-facing character
type = Explod
trigger1 = var(59) ; Only create the balloon if var(59) is 1
trigger1 = facing = 1 ; Only create the balloon if the character is facing right
anim = 182 ; Sprite index of the right-facing balloon animation
pos = 0, 0 ; Position of the balloon relative to the character
postype = p1 ; Position type (p1 for player 1, adjust if necessary)
facing = 1 ; Balloon will always face right
supermovetime = -1 ; Balloon will stay on screen indefinitely

[State 181, BalloonIntro-1] ; State to display the balloon for left-facing character
type = Explod
trigger1 = var(59) ; Only create the balloon if var(59) is 1
trigger1 = facing = -1 ; Only create the balloon if the character is facing left
anim = 183 ; Sprite index of the left-facing balloon animation
pos = 0, 0 ; Position of the balloon relative to the character
postype = p1 ; Position type (p1 for player 1, adjust if necessary)
facing = -1 ; Balloon will face left
supermovetime = -1 ; Balloon will stay on screen indefinitely

[State 181, BalloonTimer] ; State to control the duration of the balloon display
type = VarSet
trigger1 = 1
var(59) = 120 ; Adjust this value to set the duration of the balloon display (in ticks)

[State 181, EndBalloonIntro] ; State to remove the balloon
type = RemoveExplod
trigger1 = var(59) <= 0
;value = 1 ; Remove the balloon with ID 1
trigger1 = 1
;var(59) = 0 ; Reset var(59) when removing the balloon

;---------------------------------------------------------------------------
;Introduction
[Statedef 191]
type = S
ctrl = 0
anim = 190
velset = 0,0

;States shared betwenn all intros
[State 191, VarSet]
type = VarSet
trigger1 = !Time
v = 4
value = floor(Pos X)
     
[State 191, AssertSpecial]
type = AssertSpecial
trigger1 = 1
flag = Intro
flag2 = nobarDisplay

;Normal intro, as in, the intro displayed against other Mugen chars
[State 191, ChangeAnim]
type = ChangeAnim
triggerall = !Roundstate
triggerall = !Var(1)
trigger1 = enemy, authorname != "Davi Felipe F. L. Rodrigues"
value = 190

;Intros vs chars created by Davi Felipe
[State 191, ChangeAnimPlayer1];If the char is the player 1
type = ChangeAnim
triggerall = !Roundstate
triggerall = !Var(1)
triggerall = enemy, authorname = "Davi Felipe F. L. Rodrigues"
trigger1 = facing = 1 ;1 means facing right, so it's the player 1
value = 191

[State 191, ChangeAnimPlayer2];If the char is the player 2
type = ChangeAnim
triggerall = !Roundstate
triggerall = !Var(1)
triggerall = enemy, authorname = "Davi Felipe F. L. Rodrigues"
trigger1 = facing = -1 ;-1 means facing left, so it's the player 2
value = 192

;State change to 0 after the intros
[State 191, ChangeState]
type = ChangeState
triggerall = anim = 190 || anim = 191 || anim = 192
trigger1 = !AnimTime
value = 0

;---------------------------------------------------------------------------
; Taunt
; CNS difficulty: easy
[Statedef 195]
type = S
ctrl = 0
anim = 195
velset = 0,0
movetype = I
physics = S
sprpriority = 2

[State 195, 1]
type = CtrlSet
trigger1 = Time = 100
value = 1

[State 195, 2]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

; Balloon setup for the intro 1
[State 181, Balloon]
type = VarSet
trigger1 = RoundState != 0
var(59) = 1 ; Set var(59) to 1 during intro

[State 181, BalloonIntro] ; State to display the balloon for right-facing character
type = Explod
trigger1 = var(59) ; Only create the balloon if var(59) is 1
trigger1 = facing = 1 ; Only create the balloon if the character is facing right
anim = 182 ; Sprite index of the right-facing balloon animation
pos = 0, 0 ; Position of the balloon relative to the character
postype = p1 ; Position type (p1 for player 1, adjust if necessary)
facing = 1 ; Balloon will always face right
supermovetime = -1 ; Balloon will stay on screen indefinitely

[State 181, BalloonIntro-1] ; State to display the balloon for left-facing character
type = Explod
trigger1 = var(59) ; Only create the balloon if var(59) is 1
trigger1 = facing = -1 ; Only create the balloon if the character is facing left
anim = 183 ; Sprite index of the left-facing balloon animation
pos = 0, 0 ; Position of the balloon relative to the character
postype = p1 ; Position type (p1 for player 1, adjust if necessary)
facing = -1 ; Balloon will face left
supermovetime = -1 ; Balloon will stay on screen indefinitely

[State 181, BalloonTimer] ; State to control the duration of the balloon display
type = VarSet
trigger1 = 1
var(59) = 120 ; Adjust this value to set the duration of the balloon display (in ticks)

[State 181, EndBalloonIntro] ; State to remove the balloon
type = RemoveExplod
trigger1 = var(59) <= 0
;value = 1 ; Remove the balloon with ID 1
trigger1 = 1
;var(59) = 0 ; Reset var(59) when removing the balloon


;---------------------------------------------------------------------------
; Stand Light Punch
; CNS difficulty: easy
[Statedef 200]
type    = S                      ;State-type: S-stand, C-crouch, A-air, L-liedown
movetype= A                      ;Move-type: A-attack, I-idle, H-gethit
physics = S                      ;Physics: S-stand, C-crouch, A-air
juggle  = 1                      ;Number of air juggle points move takes
;Commonly-used controllers:
velset = 0,0                     ;Set velocity (x,y) (Def: no change)
ctrl = 0                         ;Set ctrl (Def: no change)
anim = 200                       ;Change animation (Def: no change)
poweradd = 10                    ;Power to add (Def: 0)
sprpriority = 2                  ;Set p1's sprite layering priority to 2 (in front)

[State 200, 1]
type = HitDef
trigger1 = AnimElem = 2	   ;2 means the frame that have the hit box
attr = S, NA                     ;Attribute: Standing, Normal Attack
damage = 23, 0                   ;Damage that move inflicts, guard damage
animtype = Light                 ;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA                   ;Flags on how move is to be guarded against
hitflag = MAF                    ;Flags of conditions that move can hit
priority = 3, Hit                ;Attack priority: 0 (least) to 7 (most), 4 default
;Hit/Miss/Dodge type (Def: Hit)
pausetime = 2, 10                ;Time attacker pauses, time opponent shakes
sparkno = 0                      ;Spark anim no (Def: set above)
sparkxy = -10, -26               ;X-offset for the "hit spark" rel. to p2. Default: -10, -76
;Y-offset for the spark rel. to p1
hitsound = 5, 0                  ;Sound to play on hit
guardsound = 6, 0                ;Sound to play on guard
ground.type = High               ;Type: High, Low, Trip (def: Normal)
ground.slidetime = 4             ;Time that the opponent slides back
ground.hittime  = 11             ;Time opponent is in hit state
ground.velocity = -7             ;Distance of pushback after a successful hit 
airguard.velocity = -1.9,-.8     ;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High                  ;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1.4,-3           ;X-velocity at which opponent is pushed,
;Y-velocity at which opponent is pushed
air.hittime = 15                 ;Time before opponent regains control in air

[State 200, 2]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 200, 3]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1 ;setting it to 1 allows the move to be interrupted

; This allows the light punch to be cancelled into the heavy punch
[State -1, Standing Heavy Punch]
type = changestate
triggerall = command = "y"
trigger1 = ctrl
trigger2 = stateno = 200 && movecontact
value = 210

; This allows the light punch to be cancelled into the medium
[State -1, Standing Medium Punch]
type = changestate
triggerall = command = "a"
trigger1 = ctrl
trigger2 = stateno = 200 && movecontact
value = 230

;---------------------------------------------------------------------------
; Stand Heavy Punch
[Statedef 210]
type    = S                      ;State-type: S-stand, C-crouch, A-air, L-liedown
movetype= A                      ;Move-type: A-attack, I-idle, H-gethit
physics = S                      ;Physics: S-stand, C-crouch, A-air
juggle  = 2                      ;Number of air juggle points move takes
;Commonly-used controllers:
velset = 3,0                     ;Set velocity (x,y) (Def: no change)
ctrl = 0                         ;Set ctrl (Def: no change)
anim = 210                       ;Change animation (Def: no change)
poweradd = 10                    ;Power to add (Def: 0)
sprpriority = 2                  ;Set p1's sprite layering priority to 2 (in front)

[State 210, 1]
type = HitDef
trigger1 = AnimElem = 3	   ;2 means the frame that have the hit box
attr = S, NA                     ;Attribute: Standing, Normal Attack
damage = 23, 0                   ;Damage that move inflicts, guard damage
animtype = Heavy                 ;Animation type: Light, Medium, Heavy, Back (def: Light)
guardflag = MA                   ;Flags on how move is to be guarded against
hitflag = MAF                    ;Flags of conditions that move can hit
priority = 3, Hit                ;Attack priority: 0 (least) to 7 (most), 4 default
;Hit/Miss/Dodge type (Def: Hit)
pausetime = 2, 10                 ;Time attacker pauses, time opponent shakes
sparkno = 0                      ;Spark anim no (Def: set above)
sparkxy = -10, -36               ;X-offset for the "hit spark" rel. to p2. Default: -10, -76
;Y-offset for the spark rel. to p1
hitsound = 5, 0                  ;Sound to play on hit
guardsound = 6, 0                ;Sound to play on guard
ground.type = Trip               ;Type: High, Low, Trip (def: Normal)
ground.slidetime = 4             ;Time that the opponent slides back
ground.hittime  = 11             ;Time opponent is in hit state
ground.velocity = -1,-4             ;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8     ;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High                  ;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1.4,-3           ;X-velocity at which opponent is pushed,
;Y-velocity at which opponent is pushed
air.hittime = 15                 ;Time before opponent regains control in air

[State 210, 2]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 210, 3]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Standing light kick
; CNS difficulty: easy
[Statedef 230]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 11
ctrl = 0
velset = 3,0
anim = 230
sprpriority = 2

[State 230, 1]
type = PlaySnd
trigger1 = Time = 2
value = 0, 1

[State 230, 2]
type = HitDef
trigger1 = Time = 0
attr = S, NA
animtype  = Light
damage    = 26
guardflag = MA
pausetime = 2,10
sparkno = 0
sparkxy = -10,-30
hitsound   = 5,1
guardsound = 6,0
ground.type = Low
ground.slidetime = 10
ground.hittime  = 14
ground.velocity = -5
air.velocity = -2.5,-3.5

[State 230, 3]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

; This allows the medium punch to be cancelled into the heavy punch
[State -1, Standing Heavy Punch]
type = changestate
triggerall = command = "y"
trigger1 = ctrl
trigger2 = stateno = 230 && movecontact
value = 210

;---------------------------------------------------------------------------
; Standing strong kick
; CNS difficulty: easy
[Statedef 240]
type    = S
movetype= A
physics = S
juggle  = 5
poweradd= 30
ctrl = 0
velset = 0,0
anim = 240
sprpriority = 2

[State 240, 1]
type = PlaySnd
trigger1 = Time = 2
value = 0, 1

[State 240, 2]
type = HitDef
trigger1 = Time = 0
attr = S, NA
animtype  = Medium
damage    = 63
guardflag = MA
pausetime = 12,12
sparkno = 1
sparkxy = -10,-60
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 17
ground.velocity = -6
air.velocity = -2.2,-3.2

[State 240, 3]
type = PosAdd
trigger1 = AnimElem = 7
x = 12

[State 240, 4]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;Crouching light punch
; CNS difficulty: easy
; Description: Simple crouching attack. The HitDef's guardflag parameter
;     is set to "L", meaning that the move can only be guarded low
;     (crouching), and not by standing or jumping opponents.
;     Like for all light attacks, it's a good idea to keep the slidetime
;     and hittime parameters at a smaller number, so the opponent isn't
;     stunned for too long. For all crouching attacks you have to
;     remember to set the attr parameter to indicate that it is crouching
;     attack. In this case, "C, NA" stands for "crouching, normal attack".
;     The HitDef's priority is set at 3, instead of the default of 4,
;     so this attack has a lower priority than most others, meaning
;     KFM will get hit instead of trading hits with his opponent if
;     their attack collision boxes (Clsn1) intersect each other's Clsn2
;     boxes at the same time.
[Statedef 400]
type    = C
movetype= A
physics = C
juggle  = 5
poweradd= 8
ctrl = 0
anim = 400
sprpriority = 2

[State 400, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 400, 2]
type = HitDef
trigger1 = Time = 0
attr = C, NA
damage    = 23
priority  = 3
animtype  = Light
hitflag = MAF
guardflag = L
pausetime = 10,11
sparkno = 0
sparkxy = -10,-20 ; -20 lowers the hitspark
hitsound   = 5,0
guardsound = 6,0
ground.type = Low
ground.slidetime = 4
ground.hittime  = 9
ground.velocity = -4
air.velocity = -1.5,-3

[State 400, 3]
type = CtrlSet
trigger1 = Time = 6
value = 1

[State 400, 4]
type = ChangeState
trigger1 = AnimTime = 0
value = 11

;---------------------------------------------------------------------------
;Crouching Heavy Punch
; CNS difficulty: easy
; Description: This is a 2-hit move. It is done by having two HitDefs
;     triggered, one for each frame of animation that hits.
;     Notice how the first hit cannot be guarded by an opponent in the
;     air, because of the "M" in the guardflag, meaning it can only
;     be guarded "middle". The second hit has an "MA" guardflag, so
;     it can be guarded both on the ground and in the air.
[Statedef 410]
type    = C
movetype= A
physics = C
juggle  = 2
poweradd= 25
ctrl = 0
anim = 410
sprpriority = 2

[State 410, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

;This is the first hit, triggered on the 3rd element of animation.
[State 410, 2]
type = HitDef
trigger1 = AnimElem = 2
attr = C, NA
damage    = 37
animtype  = Medium
hitflag = MAF
guardflag = M
pausetime = 12,12
sparkno = 1
sparkxy = -10, -26  
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 17
ground.velocity = -4
air.velocity = -3,-4

;This is the second hit, triggered on the 4th element of animation.
[State 410, 3]
type = HitDef
trigger1 = AnimElem = 3
attr = C, NA
damage    = 36
animtype  = Heavy
hitflag = MAF
guardflag = MA
pausetime = 12,12
sparkxy = -10, -26  
hitsound   = 5,2
guardsound = 6,0
ground.type = Trip               ;Type: High, Low, Trip (def: Normal)  Trip makes the character pop up
ground.slidetime = 0             ;Time that the opponent slides back
ground.hittime  = 20             ;Time opponent is in hit state
ground.velocity = -1,-8             ;Velocity at which opponent is pushed
airguard.velocity = -1.9,-.8     ;Guard velocity in air (def: (air.xvel*1.5, air.yvel/2))
air.type = High                  ;Type: High, Low, Trip (def: same as ground.type)
air.velocity = -1.4,-.1           ;X-velocity at which opponent is pushed,;Y-velocity at which opponent is pushed
air.hittime = 15                 ;Time before opponent regains control in air

[State 410, 4]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
;Crouching Medium Punch
; CNS difficulty: easy
[Statedef 430]
type    = C
movetype= A
physics = C
juggle  = 5
poweradd= 11
ctrl = 0
anim = 430
sprpriority = 2

[State 430, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 430, 2]
type = HitDef
trigger1 = Time = 0
attr = C, NA
damage    = 28
animtype  = Medium
hitflag = MAFD
guardflag = L
pausetime = 12,12
sparkno = 0
sparkxy = -10,-20
hitsound   = 5,1
guardsound = 6,0
ground.type = Low
ground.slidetime = 6
ground.hittime  = 10
ground.velocity = -5
air.velocity = -2,-3
down.velocity = -5,0
down.hittime = 22

[State 430, 3]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
;Crouch Strong Kick
; CNS difficulty: easy
; Description: This move uses "Trip" for the "ground.type" parameter in
;     its HitDef. It's a special type that puts the opponent in a tripped
;     animation as he falls. Also, the hitflag parameter in the HitDef
;     is set to "MAFD". The "D" indicates that a downed opponent can be
;     hit by the attack.
[Statedef 440]
type    = C
movetype= A
physics = C
juggle  = 7
poweradd= 35
ctrl = 0
anim = 440
sprpriority = 2

[State 440, 2]
type = PlaySnd
trigger1 = Time = 2
value = 0, 2

[State 440, 3]
type = HitDef
trigger1 = Time = 0
attr = C, NA
damage    = 72
hitflag = MAFD
guardflag = L
pausetime = 12,12
sparkno = 1
sparkxy = -5,-10
hitsound   = 5,2
guardsound = 6,0
ground.type = Trip
ground.slidetime = 10
ground.hittime  = 17
ground.velocity = -1.5,-2
air.velocity = -1.2,-3
guard.velocity = -5
fall = 1

[State 440, 4]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
; Jump Light Punch
; CNS difficulty: easy
[Statedef 600]
type    = A
movetype= A
physics = A
juggle  = 5
poweradd= 5
ctrl = 0
anim = 600
sprpriority = 2

[State 600, 1]
type = PlaySnd
trigger1 = Time = 2
value = 0, 0

[State 600, 2]
type = HitDef
trigger1 = Time = 2
attr = A, NA
damage    = 20
guardflag = HA
priority = 3
pausetime = 7,8
sparkno = 0
sparkxy = -10,-28
hitsound   = 5,0
guardsound = 6,0
ground.type = High
ground.slidetime = 5
ground.hittime  = 8
ground.velocity = -4
air.velocity = -1.3,-3
air.hittime = 14

[State 600, 3]
type = CtrlSet
trigger1 = Time = 17
value = 1

[State -1, Jump Heavy Punch]
type = changestate
triggerall = command = "y"
trigger1 = ctrl
trigger2 = stateno = 600 && movehit
value = 610

;---------------------------------------------------------------------------
;Jump Heavy Punch
; CNS difficulty: easy
[Statedef 610]
type    = A
movetype= A
physics = A
juggle  = 10
poweradd= 30
ctrl = 0
anim = 610
sprpriority = 2

[State 610, 2]
type = PlaySnd
trigger1 = Time = 2
value = 0, 1

[State 610, 3]
type = HitDef
trigger1 = Time = 0
attr = A, NA
damage = 72
guardflag = HA
priority = 4
pausetime = 2,12
sparkno = 1
sparkxy = -10,-28
hitsound   = 5,3
guardsound = 6,0
animtype = Med
ground.type = High
ground.slidetime = 12
ground.hittime  = 14
ground.velocity = -6
air.velocity = -3,-4

;---------------------------------------------------------------------------
;Jump Medium Punch
; previouly jumping light kick
; CNS difficulty: easy
[Statedef 630]
type    = A
movetype= A
physics = A
juggle  = 3
poweradd= 10
ctrl = 0
anim = 630
sprpriority = 2

[State 630, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 630, 2]
type = HitDef
trigger1 = Time = 0
attr = A, NA
damage = 26
guardflag = HA
priority = 3
pausetime = 8,8
sparkno = 1
sparkxy = -10,-40
hitsound   = 5,0
guardsound = 6,0
ground.type = High
ground.slidetime = 6
ground.hittime  = 10
ground.velocity = -4
air.velocity = -2,-3
air.hittime = 14

;---------------------------------------------------------------------------
;Jump Strong Punch
; previously jump strong kick
; CNS difficulty: easy
[Statedef 640]
type    = A
movetype= A
physics = A
juggle  = 4
poweradd= 30
ctrl = 0
anim = 640
sprpriority = 2

[State 640, 2]
type = PlaySnd
trigger1 = Time = 2
value = 0, 1

[State 640, 3]
type = HitDef
trigger1 = Time = 0
attr = A, NA
damage    = 70
guardflag = HA
priority = 4
pausetime = 12,12
sparkno = 1
sparkxy = -10,-40
hitsound   = 5,3
guardsound = 6,0
animtype = Heavy
ground.type = High
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -7
air.velocity = -3,-4

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
;Throw - Attempt
; CNS difficulty: medium-advanced
; Description: Throws are not difficult to make, although then can be
;     tedious at times. Throw attempt states have a HitDef of a
;     special format. The key parameters in a throw are p1stateno
;     and p2stateno. If the HitDef successfully connects, then
;     the attacker will change to the state number specified by
;     p1stateno, and the opponent will be change to the state
;     number assigned to p2stateno. The special thing about p2stateno
;     is that the opponent will be temporarily brought into the
;     attacker's state file. In this case, no matter who the
;     opponent is, he will be taken to state 820 of this file (kfm.cns)
;     and remain here until the end of the throw (look at his debug
;     information when he is being thrown; the text changes to yellow
;     to mean that he is in another player's state file).
[Statedef 800]
type    = S
movetype= A
physics = S
juggle  = 0
velset = 0,0
ctrl = 0
anim = 800
sprpriority = 2

; Notes: The '-' symbol in the hitflag field means that it only affects
;   players who are not in a hit state. This prevents KFM from combo-ing
;   into the throw. The priority should be set to a low number, such as
;   1 or 2, so that the throw does not take precedence over normal attacks.
;   The type of priority must always be set to "Miss" or "Dodge" for throws,
;   otherwise strange behavior can result.
[State 800, 1]
type = HitDef
Trigger1 = Time = 0
attr = S, NT          ;Attributes: Standing, Normal Throw
hitflag = M-          ;Affect only ground people who are not being hit
priority = 1, Miss    ;Throw has low priority, must be miss or dodge type.
sparkno = -1          ;No spark
p1sprpriority = 1     ;Draw p1's sprite in front of p2
                      ;p2's sprite priority is set to 0 by default
p1facing = 1
p2facing = 1          ;Force p2 to face KFM
p1stateno = 810       ;On success, KFM changes to state 810
p2stateno = 820       ;If hit, p2 changes to state 820 in KFM's cns
guard.dist = 0        ;This prevents p2 from going into a guard state if close
fall = 1              ;Force p2 into falling down

[State 800, 2]
type = ChangeState
Trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;Throwing the opponent
; Description: In this state, KFM throws the opponent by binding him to
;     various offsets based on his current frame of animation. For
;     example, [State 810, Bind 1] binds the opponent to an offset of
;     28 pixels in front of KFM. That puts him around where KFM's hand
;     is at. Is is important to keep the opponent bound using a
;     TargetBind controller at all times, until you let him go. This
;     is especially important if your player has a Clsn2 box that
;     allows him to get hit while throwing someone. Each time a player
;     gets hit, all his bound targets will be set to a fall state. If
;     the opponent is not bound, then he may get stuck in his thrown
;     state when his attacker is knocked out of the throw halfway.
; Notes: There is a TargetLifeAdd controller to decrease the opponent's
;     life, and a TargetState controller to change his state to a
;     falling state when KFM lets go of him.
[Statedef 810]
type    = S
movetype= A
physics = N
anim = 810
poweradd = 0

; Here a variable, var(2), is used to remember whether or not the
; player was holding forward at the start of the state. This variable
; is checked later on to turn KFM around if necessary.
[State 810, Holding fwd?]
type = VarSet
trigger1 = Time = 0
var(2) = command = "holdfwd"

[State 810, Grab Sound]
type = PlaySnd
trigger1 = AnimElem = 2
value = 1, 1

[State 810, Throw Sound]
type = PlaySnd
trigger1 = AnimElem = 7
value = 800, 0

[State 810, Bind 1]
type = TargetBind
trigger1 = AnimElemTime(2) < 0
pos = 28, 0 ; default:28, 0

[State 810, Width 2-11]
type = Width
trigger1 = AnimElemTime(2) >= 0 && AnimElemTime(12) < 0
edge = 10,0 ; default: 60,0

; getting grabbed
[State 810, Bind 2-4]
type = TargetBind
trigger1 = AnimElemTime(2) >= 0 && AnimElemTime(5) < 0
pos = 30, 0

; this changed nothing, apparently
[State 810, Bind 5]
type = TargetBind
trigger1 = AnimElemTime(5) >= 0 && AnimElemTime(6) < 0
pos = 17, 0 ; default: 47, 0

; turns the character if it was holding forward
[State 810, holdfwd - Turn 6] 
type = Turn
trigger1 = var(2)
trigger1 = AnimElem = 6

; move the character a little if it was holding forward
[State 810, holdfwd - Pos 6] 
type = PosAdd
trigger1 = var(2)
trigger1 = AnimElem = 6
x = -37 ; default: -37

; turn the target too, if it was holding forward
[State 810, holdfwd - Turn Target 6]
type = TargetFacing
trigger1 = var(2)
trigger1 = AnimElem = 6
value = -1

; this is when the character releases the target
[State 810, Bind 6]
type = TargetBind
trigger1 = AnimElemTime(6) >= 0 && AnimElemTime(7) < 0
pos = 41, -20 ; default: 41, -60

[State 810, Bind 7]
type = TargetBind
trigger1 = AnimElemTime(7) >= 0 && AnimElemTime(8) < 0
pos = 25, -20 ; default: 25, -75

[State 810, Bind 8]
type = TargetBind
trigger1 = AnimElemTime(8) >= 0 && AnimElemTime(9) < 0
pos = 15, -20 ; default: 15, -90

[State 810, Bind 9]
type = TargetBind
trigger1 = AnimElemTime(9) >= 0 && AnimElemTime(10) < 0
pos = -5, -20 ; default: -5, -96

[State 810, Bind 10]
type = TargetBind
trigger1 = AnimElemTime(10) >= 0 && AnimElemTime(11) < 0
pos = -14, -20 ; default: -14, -90

; the y in this pos determines the maximum height the character is thrown
[State 810, Bind 11]
type = TargetBind
trigger1 = AnimElem = 11
pos = 4, -4 ; default: -50, -50

[State 810, Hurt 11]
type = TargetLifeAdd
trigger1 = AnimElem = 11
value = -78

[State 810, Throw 11]
type = TargetState
trigger1 = AnimElem = 11
value = 821

[State 810, Turn 12]
type = Turn
trigger1 = AnimElem = 12

[State 810, Pos 15]
type = PosAdd
trigger1 = AnimElem = 15
x = -10

[State 810, State End]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;Thrown
; (a custom gethit state)
; Description: This is the state that the opponent changes to after being
;     hit by KFM's throw HitDef. The important thing here is to use a
;     ChangeAnim2 controller. The difference between ChangeAnim2 and
;     ChangeAnim is that ChangeAnim2 changes the player's animation to
;     an action in the AIR file of the attacker (in this case, kfm.air),
;     whereas ChangeAnim always changes the player to an action in his
;     own AIR file. Look at Action 820 in kfm.air for some extra
;     comments.
[Statedef 820]
type    = A
movetype= H
physics = N
velset = 0,0

[State 820, 1]
type = ChangeAnim2
Trigger1 = Time = 0
value = 820

;In case attacker loses binding on player for any reason, this controller
;guarantees that the player will never get stuck in this thrown state.
[State 820, 2]
type = SelfState
trigger1 = !gethitvar(isbound)
value = 5050

;---------------------------------------------------------------------------
;Thrown into the air
; (a custom gethit state)
; Description: This state has the opponent flying through the air and
;     falling down onto the ground. The SelfState controller sets the
;     opponent back using to his own state file when he his the ground.
;     Controllers 821,2 and 821,3 allow the opponent to recover by
;     hitting his recovery command when he is falling.
[Statedef 821]
type    = A
movetype= H
physics = N
velset = 2.8,-7
poweradd = 40

[State 821, 1] ;Gravity
type = VelAdd
Trigger1 = 1
y = .4

[State 821, 2] ; Recover near ground (use ChangeState)
type = ChangeState
triggerall = Vel Y > 0
triggerall = Pos Y >= -20
triggerall = alive
triggerall = CanRecover
trigger1 = Command = "recovery"
value = 5200 ;HITFALL_RECOVER

[State 821, 3] ; Recover in mid air (use SelfState)
type = SelfState
triggerall = Vel Y > 0
triggerall = alive
triggerall = CanRecover
trigger1 = Command = "recovery"
value = 5210 ;HITFALL_AIRRECOVER

[State 821, 4] ;Hit ground
type = SelfState
trigger1 = Vel Y > 0
trigger1 = Pos Y >= 0
value = 5100 ;Hit ground

;---------------------------------------------------------------------------
; Special Moves
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

; Super Argentina BackBreaker Attempt
;This use YongMIng's Argentina BackBreaker
[Statedef 900]
type    = S
movetype= A
physics = S
juggle  = 0
velset = 0,0
ctrl = 0
anim = 900
sprpriority = 2

[State 900, 1]
type = Playsnd
trigger1 = Animelem = 2
value = 1006, 4
channel = 0

[State 900, 2]
type = HitDef
Trigger1 = Time = 0
attr = S, ST          
hitflag = MF          
priority = 1, Miss    
sparkno = -1          
p1sprpriority = 1     
                      
p1facing = 1
p2facing = 1          
p1stateno = 901       
p2stateno = 904       
id = 900
guard.dist = 0        
getpower = 340
givepower = 244

[State 900, 3]
type = Nothitby
trigger1 = time = 0
value = SCA
time = 4

[State 900, 4]
type = ChangeState
trigger1 = animtime = 0 
value = 0
ctrl = 1

;------------------------------------
; Super Argentina BackBreaker succeed
[Statedef 901]
type    = S
movetype= A
physics = N
anim = 901
poweradd = 0
ctrl = 0
velset = 0,0

[State 901, 1]
type = Width
trigger1 = 1
edge = 60,0

[State 901, 2]
type = Explod
trigger1 = animelem = 3
anim = 8200
pos = 54,-52
postype = p1
bindtime = 1
ontop = 1
ownpal = 1

[State 901, 3.1]
type = sprpriority
trigger1 = time >= 34
trigger1 = time <= 36
value = 1

[State 901, 3.2]
type = sprpriority
trigger1 = time >= 27
value = 2

[State 901, 4.1]
type = TargetBind
trigger1 = time >= 0
trigger1 = time <= 2
pos = 42,0

[State 901, 4.2]
type = TargetBind
trigger1 = time >= 3
trigger1 = time <= 6
pos = 55,0

[State 901, 4.3]
type = TargetBind
trigger1 = time >= 7
trigger1 = time <= 19
pos = 30,0

[State 901, 4.4]
type = TargetBind
trigger1 = time >= 29
trigger1 = time <= 33
pos = 42,-120 ; default: 42,-82

[State 901, 4.5]
type = TargetBind
trigger1 = time >= 34
trigger1 = time <= 37
pos = 6,-120 ;default: 6,-109

[State 901, 4.6]
type = TargetBind
trigger1 = time = 38
pos = 10,-200 ;default: 10,-200

[State 901, 5]
type = Hitdef
trigger1 = animelem = 8
attr = S, ST
hitflag = A
priority = 7,Hit
sparkno = -1
p2facing = 1
p1stateno = 902
p2stateno = 906
p2getp1state = 1
id = 901
chainID = 900
numhits = 0
hitonce = 1

[State 901, 6.1];play clark succeed snd
type = Playsnd
trigger1 = Animelem = 3
value = 1006, 0
volume = 80

[State 901, 6.2];play catch snd
type = Playsnd
trigger1 = Animelem = 2
value = 1006, 2
volume = 150

[State 901, 6.3];play fly snd
type = Playsnd
trigger1 = Animelem = 5
value = 1006, 3

[State 901, 7];this part will excute only when there is error;opponent is away
type = ChangeState
trigger1 = time = 150
value = 0
ctrl = 1

;---------------------------------------------------
; Super Argentina BackBreaker succeed - Backbreaking
[Statedef 902]
type    = S
physics = S
movetype= A
anim = 902
ctrl = 0
velset = 0,0

[State 902, Spark]
type = Explod
trigger1 = time = 0
anim = F3
pos =  5, -80
postype = p1
sprpriority = 3
ownpal = 1

[State 902, 1.2];ground wave
type = Explod
trigger1 = time = 0
anim = F60
pos = 10,5
postype = p1
bindtime = 1
ontop = 0
ownpal = 1

[State 902, 2.1]
type = TargetBind
trigger1 = time >= 0
trigger1 = time <= 7
pos = -9,-50 ; default: -9,-80

[State 902, 2.2]
type = TargetBind
trigger1 = time >= 8
pos = -9,-50 ; default: -9,-100

[State 902, 3]
type = sprpriority
trigger1 = 1
value = 1

[State 902, 4]
type = turn
trigger1 = time = 0

[State 902, 5];shaking effect
type = Envshake
trigger1 = time = 0
time = 15
freq = 30
ampl = -5

[State 902, 6];play crush snd
type = Playsnd
trigger1 = time = 0
value = 1006,1

[State 902, 7]
type = Width
trigger1 = 1
edge = 0,30

[State 902, 8]
type = ChangeState
trigger1 = animtime = 0
value = 903

;----------------------------------------------------------
; Super Argentina BackBreaker succeed - Throw to the ground
[Statedef 903]
type    = S
physics = S
movetype= A
anim = 903
ctrl = 0
velset = 0,0

[State 903, 1]
type = sprpriority
trigger1 = 1
value = 1

[State 903, 2.1]
type = TargetBind
trigger1 = time >= 0
trigger1 = time <= 3
pos = 50,-105

[State 903, 2.2]
type = TargetBind
trigger1 = time >= 4
trigger1 = time <= 7
pos = 62,-88

[State 903, 2.3]
type = TargetBind
trigger1 = time = 8
pos = 115,-3

[State 903, 3.1];smash ground wave
type = Explod
trigger1 = p2stateno = 908
anim = F62
pos = 0,5
postype = p2
bindtime = 1
ontop = 1
ownpal = 1
persistent = 0

[State 903, 3.2];dust
type = Explod
trigger1 = p2stateno = 909
anim = 8150
pos = -10,-8
postype = p2
bindtime = 1
ontop = 1
ownpal = 1
persistent = 0

[State 903, 4];shaking effect
type = Envshake
trigger1 = p2stateno = 908
time = 15
freq = 70
ampl = -3
persistent = 0

[State 903, 5.1];play clark snd 'wu ya'
type = Playsnd
trigger1 = time = 0
value = 5, 2
channel = 0

[State 903, 5.2];play drop snd
type = Playsnd
trigger1 = p2stateno = 908
value = 800,2
persistent = 0

[State 903, 5.3];play land down snd
type = Playsnd
trigger1 = p2stateno = 909
value = 800,1
persistent = 0

[State 903, 6]
type = Width
trigger1 = 1
edge = 100,0

[State 903, 7]
type = ChangeState
trigger1 = animtime = 0
value = 0
ctrl = 1

;---------------------------------------------
; Throw by Super Argentina BackBreaker - go up
[Statedef 904]
type    = A
physics = N
movetype= H
ctrl = 0
velset = 0,0

[State 904, 1]
type = Changeanim2
trigger1 = time = 0
value = 904

[State 904, 2.1]
type = Velset
trigger1 = time >= 37
trigger1 = time <= 60
y = -10

[State 904, 2.2]
type = Velset
trigger1 = time >= 51
y = 0

[State 904, 3]
type = sprpriority
trigger1 = time >= 34
trigger1 = time <= 36
value = 2

[State 904, 4]
type = Nothitby
trigger1 = 1
value = SCA

[State 904, 5];adjust the camera
type = ScreenBound
trigger1 = 1
value = 1

[State 904, 6]
type = Width
trigger1 = 1
value = -30,-30

[State 904, 7]
type = Changestate
trigger1 = time = 68 ;default: 68
value = 905

;-------------------------------------------------
; Throw by Super Argentina BackBreaker - come down
[Statedef 905]
type    = A
physics = A
movetype= H
ctrl = 0

[State 905, 1]
type = Velset
trigger1 = 1
y = 12

[State 905, 2]
type = sprpriority
trigger1 = time >= 0
value = 1

[State 905, 3]
type = Hitby
trigger1 = 1
value = S, ST

[State 905, 4]
type = Width
trigger1 = 1
value = -30,-30

[State 905, 5];adjust the camera
type = ScreenBound
trigger1 = 1
value = 1

;-------------------------------------------------------
; Throw by Super Argentina BackBreaker - being backbreak
[Statedef 906]
type    = A
physics = N
movetype= H
ctrl = 0

[State 906, 1]
type = Changeanim2
trigger1 = time = 0
value = 906

[State 906, 2]
type = sprpriority
trigger1 = 1
value = 2

[State 906, 3];adjust the camera
type = ScreenBound
trigger1 = 1
value = 1

[State 906, 4];damage
type = lifeadd
trigger1 = time = 0
value = -100
absolute = 1
kill = 0

[State 906, 5]
type = Width
trigger1 = 1
value = -30,-30

[State 906, 6]
type = Changestate
trigger1 = animtime = 0
value = 907

;------------------------------------------------------------------
; Throw by Super Argentina BackBreaker - being thrown to the ground
[Statedef 907]
type    = A
physics = N
movetype= H
ctrl = 0

[State 907, 1]
type = Changeanim2
trigger1 = time = 0
value = 907

[State 907, 2]
type = sprpriority
trigger1 = 1
value = 2

[State 907, 4]
type = veladd
trigger1 = time >= 9
y = .53

[State 813, 5];adjust the camera
type = ScreenBound
trigger1 = 1
value = 1

[State 907, 6];freeze for a moment
type = PosFreeze
trigger1 = time >= 9
trigger1 = time <= 13

[State 907, 7]
type = Width
trigger1 = 1
value = -30,-30

[State 907, 8]
type = ChangeState
trigger1 = time > 9
trigger1 = Vel Y > 0
trigger1 = Pos Y >= -20
value = 908

;------------------------------------------------
; Throw by Super Argentina BackBreaker - bouncing
[Statedef 908]
type    = L
physics = N
movetype= H
ctrl = 0
velset = 2.4,-5

[State 908, 1]
type = Changeanim2
trigger1 = time = 0
value = 908

[State 908, 2]
type = Veladd
trigger1 = 1
y = .53

[State 908, 3.1]
type = posset
trigger1 = time = 0
y = 0

[State 908, 3.2]
type = posadd
trigger1 = animelem = 2
y = -20

[State 908, 3.3]
type = veladd
trigger1 = vel x >= 0
x = -.2

[State 908, 4]
type = turn
trigger1 = Time = 0

[State 908, 5];damage
type = lifeadd
trigger1 = time = 0
value = -120
absolute = 1

[State 908, 6]
type = ChangeState
trigger1 = time > 11
trigger1 = Vel Y > 0
trigger1 = Pos Y >= -20
value = 909

;--------------------------------------------------
; Throw by Super Argentina BackBreaker - lying down
[Statedef 909]
type    = L
physics = N
movetype= H
ctrl = 0
velset = 0,0

[State 909, 1]
type = Changeanim2
trigger1 = time = 0
value = 909

[State 909, 2]
type = posset
trigger1 = time = 0
y = 0

[State 909, 3.1] ;If just died
type = SelfState
triggerall = !alive
trigger1 = p2stateno = 803;opponent never access flashing elbow
trigger1 = Time = 0
trigger2 = Time = 25
value = 5150

[State 909, 3.2] ;If alive
type = SelfState
triggerall = alive
trigger1 = Time = 25
value = 5120

;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; Hop forwards
[Statedef 11105]
type    = A
physics = A
ctrl = 0
anim = 106
sprpriority = 1

[State 11105, 1]
type = VelSet
trigger1 = Time = 0
x = const(velocity.run.fwd.x)
y = const(velocity.jump.y)*0.4

[State 11105, 2]
type = CtrlSet
trigger1 = Time = 2
value = 1

[State 11105, 3]
type = ChangeState
trigger1 = Vel Y > 0
trigger1 = Pos Y >= 0
value = 11106

;---------------------------------------------------------------------------
; Hop forwards (land)
[Statedef 11106]
type    = S
physics = S
ctrl = 0
anim = 47

[State 11106, 1]
type = VelSet
trigger1 = Time = 0
y = 0

[State 11106, 2]
type = PosSet
trigger1 = Time = 0
y = 0

;[State 11106, 3]
;type = MakeDust
;trigger1 = Time = 2
;pos = 0, 0
;spacing = 1

[State 11106, 3]
type = VelSet
trigger1 = abs(vel x) < Const(movement.stand.friction.threshold)
x = 0

[State 11106, 4]
type = ChangeState
trigger1 = Time = 7
value = 0
ctrl = 1

;---------------------------------------------------------------------------


;---------------------------------------------------------------------------
; Override common states (use same number to override) :
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; States that are always executed (use statedef -2)
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; States that are executed when in self's state file (use statedef -3)
;---------------------------------------------------------------------------

[Statedef -3]

;This controller plays a sound everytime KFM lands from a jump, or
;from his back-dash.
[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 52 ;Jump land
trigger2 = stateno = 106 ;Run-back land
value = 40, 0